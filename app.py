import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
import numpy as np
import os
from nba_stats_predictor import NBAStatsPredictor
import time
import plotly.graph_objects as go

# Initialiser le pr√©dicteur comme variable de session si non existant
@st.cache_resource
def load_predictor():
    predictor = NBAStatsPredictor(data_file='nba_game_logs_2025.csv')
    return predictor


# Config page
st.set_page_config(page_title="NBA Stat Predictor", page_icon="üèÄ", layout="centered")

# --- STYLES CLAIRS ET LISIBLES ---
st.markdown("""
<style>
.main {
    background-color: #f4f6f8;
}
h1, h2, h3 {
    color: #1f2937;
    text-align: center;
}
.stSelectbox > div > div {
    background-color: #ffffff;
    border-radius: 8px;
    color: #000000;
}
.stTextInput > div > input {
    background-color: #ffffff !important;  
    padding: 10px;
    border-radius: 8px;
    color: #000000 !important;
    opacity: 1 !important;
}
.stButton > button {
    background-color: #2563eb;
    color: white;
    border-radius: 8px;
    font-weight: bold;
}
.stat-card {
    background-color: white;
    border-radius: 10px;
    padding: 15px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    margin-bottom: 15px;
}
.player-info {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
}
.player-image {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 15px;
}
</style>
""", unsafe_allow_html=True)

# Charger le pr√©dicteur
predictor = load_predictor()

# Fonction pour mapper ID joueur √† nom complet et vice versa
@st.cache_data
def get_player_mappings():
    # Cr√©er un mapping joueur
    df = predictor.data
    
    # Extraire les IDs uniques et les noms d'affichage
    player_ids = df['player_id'].unique()
    player_names = {}
    id_to_name = {}
    
    for pid in player_ids:
        # R√©cup√©rer les entr√©es pour ce joueur
        player_entries = df[df['player_id'] == pid]
        
        if len(player_entries) > 0:
            # Utiliser le premier nom trouv√© pour ce joueur
            display_name = player_entries['player_name'].iloc[0] if 'player_name' in player_entries.columns else pid
            player_names[display_name] = pid
            id_to_name[pid] = display_name
            
    return player_names, id_to_name

# Fonction pour mapper √©quipe √† nom complet
@st.cache_data
def get_team_mappings():
    # R√©cup√©rer toutes les √©quipes uniques
    df = predictor.data
    teams = df['Team'].unique()
    team_names = {}
    
    # Mapping codifi√© (√† compl√©ter avec toutes les √©quipes)
    team_full_names = {
        'BOS': 'Boston Celtics',
        'LAL': 'Los Angeles Lakers',
        'GSW': 'Golden State Warriors',
        'MIL': 'Milwaukee Bucks',
        'DAL': 'Dallas Mavericks',
        'PHI': 'Philadelphia 76ers',
        'MIA': 'Miami Heat',
        'NYK': 'New York Knicks',
        'LAC': 'Los Angeles Clippers',
        'DEN': 'Denver Nuggets',
        'PHO': 'Phoenix Suns',
        'CLE': 'Cleveland Cavaliers',
        'TOR': 'Toronto Raptors',
        'CHI': 'Chicago Bulls',
        'B': 'Brooklyn Nets',
        'ATL': 'Atlanta Hawks',
        'MEM': 'Memphis Grizzlies',
        'NOP': 'New Orleans Pelicans',
        'MIN': 'Minnesota Timberwolves',
        'POR': 'Portland Trail Blazers',
        'CHO': 'Charlotte Hornets',
        'WAS': 'Washington Wizards',
        'ORL': 'Orlando Magic',
        'SAC': 'Sacramento Kings',
        'UTA': 'Utah Jazz',
        'DET': 'Detroit Pistons',
        'IND': 'Indiana Pacers',
        'OKC': 'Oklahoma City Thunder',
        'HOU': 'Houston Rockets',
        'SAS': 'San Antonio Spurs'
    }
    
    for team in teams:
        if team in team_full_names:
            team_names[team_full_names[team]] = team
        else:
            team_names[team] = team
    
    return team_names

# Obtenir les mappings de joueurs et √©quipes
name_to_id, id_to_name = get_player_mappings()
team_to_code = get_team_mappings()
@st.cache_data
def get_model_comparison_results():
    # Utiliser LeBron James comme exemple (vous pouvez changer pour un autre joueur)
    player_id = "j/jamesle01"
    
    try:
        comparison_results = predictor.compare_models(player_id)
        
        if "error" in comparison_results:
            # Retourner des valeurs par d√©faut en cas d'erreur
            return {
                "GradientBoosting": {"R¬≤": 0.76, "MAE": 3.2},
                "RandomForest": {"R¬≤": 0.72, "MAE": 3.5},
                "SVR": {"R¬≤": 0.67, "MAE": 3.9}
            }, player_id, False
        
        return comparison_results["model_results"], player_id, True
    except Exception as e:
        st.error(f"Erreur lors de la comparaison des mod√®les: {e}")
        # Valeurs par d√©faut
        return {
            "GradientBoosting": {"R¬≤": 0.76, "MAE": 3.2},
            "RandomForest": {"R¬≤": 0.72, "MAE": 3.5},
            "SVR": {"R¬≤": 0.67, "MAE": 3.9}
        }, player_id, False
# --- MENU ---
with st.sidebar:
    selected = option_menu(
        menu_title="Navigation",
        options=["üè† Accueil","üìä Pr√©sentation du Dataset","ü§ñ Comparaison des Mod√®les" ,"üìä Pr√©dire les Stats", "üìà Analyse de Joueur", "üèÜ Analyse de Match"],
        icons=["house", "bar-chart-line", "person-lines-fill", "trophy"],
        menu_icon="cast",
        default_index=0,
        styles={
            "container": {"background-color": "#e5e7eb"},
            "icon": {"color": "#2563eb", "font-size": "20px"},
            "nav-link": {"color": "#111827", "font-size": "18px", "text-align": "left"},
            "nav-link-selected": {"background-color": "#dbeafe"},
        }
    )
    
    st.markdown("### √Ä propos")
    st.markdown("Cette application utilise l'apprentissage automatique pour pr√©dire les statistiques des joueurs NBA en fonction de leurs performances pass√©es et du contexte du match.")
    st.markdown("---")
    st.markdown("Version 2.0 - Mai 2025")

# --- PAGE ACCUEIL ---
if selected == "üè† Accueil":
    st.markdown("<h1>üèÄ NBA Stat Predictor</h1>", unsafe_allow_html=True)
    st.markdown("### Une exp√©rience de pr√©diction simple, rapide et fiable.")
    st.image("https://cdn.nba.com/manage/2022/12/nba-logo.png", width=120)
    st.markdown("> ‚ö° Utilisez notre IA pour estimer les performances NBA √† venir.")
    
    st.markdown("### Fonctionnalit√©s")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("#### üìä Pr√©diction")
        st.markdown("Pr√©disez les statistiques d'un joueur pour son prochain match.")
    with col2:
        st.markdown("#### üìà Analyse")
        st.markdown("Explorez les tendances et performances d'un joueur.")
    with col3:
        st.markdown("#### üèÜ Matchs")
        st.markdown("Analysez les affrontements entre √©quipes.")
    
    st.markdown("---")
    st.markdown("### Comment √ßa marche?")
    st.markdown("""
    1. **Mod√®les personnalis√©s** - Un mod√®le distinct est entra√Æn√© pour chaque joueur
    2. **Contexte intelligent** - Prise en compte des matchs √† domicile/ext√©rieur, repos, etc.
    3. **Analyse avanc√©e** - Tendances r√©centes et historique contre chaque adversaire
    """)
# Code √† int√©grer dans app.py juste apr√®s la section "--- PAGE ACCUEIL ---"

# --- PAGE PR√âSENTATION DU DATASET ---
elif selected == "üìä Pr√©sentation du Dataset":
    st.markdown("<h2>üìä Analyse du Dataset NBA 2025</h2>", unsafe_allow_html=True)
    
    # Introduction au dataset
    st.markdown("""
    Cette page pr√©sente une analyse des donn√©es utilis√©es par notre mod√®le de pr√©diction. 
    Le dataset contient **23 412 entr√©es** de statistiques de matchs NBA pour la saison 2025,
    couvrant **289 joueurs** r√©partis dans **30 √©quipes**.
    
    Explorez les visualisations ci-dessous pour mieux comprendre les performances des joueurs
    et les tendances qui alimentent notre mod√®le pr√©dictif.
    """)
    
    # Indicateurs cl√©s (KPIs)
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric(label="Total de matchs", value="23 412")
    with col2:
        st.metric(label="Joueurs", value="289")
    with col3:
        st.metric(label="√âquipes", value="30")
    with col4:
        st.metric(label="Stats par joueur", value="36")
    
    st.markdown("---")
    
    # Chargement et pr√©paration des donn√©es pour les visualisations
# Chargement et pr√©paration des donn√©es pour les visualisations
    @st.cache_data
    def prepare_visualization_data():
        # Cette fonction pr√©pare les donn√©es pour les trois visualisations
        import pandas as pd
        import numpy as np
        
        # Charger les donn√©es
        df = pd.read_csv('nba_game_logs_2025.csv')
        
        # 1. Donn√©es pour Top 10 des meilleurs marqueurs
        # CORRECTION: Regrouper par joueur et date pour √©viter les doublons
        # Cr√©er une cl√© unique pour chaque match
        df['match_key'] = df['player_id'] + '-' + df['Date'].astype(str)
        
        # S√©lectionner le premier enregistrement pour chaque match (√©liminer les doublons)
        unique_matches = df.drop_duplicates(subset=['match_key'])
        
        # Calculer les moyennes de points par joueur
        player_stats = unique_matches.groupby(['player_id', 'player_name']).agg({
            'PTS': 'mean',
            'TRB': 'mean',
            'AST': 'mean',
            'match_key': 'count'  # Nombre de matchs
        }).reset_index()
        
        # Renommer la colonne pour plus de clart√©
        player_stats = player_stats.rename(columns={'match_key': 'games_played'})
        
        # Filtrer les joueurs avec au moins 15 matchs
        qualified_players = player_stats[player_stats['games_played'] >= 15].copy()
        qualified_players = qualified_players.sort_values('PTS', ascending=False).head(10)
        
        # 2. Distribution des minutes jou√©es
        minutes_bins = [0, 10, 20, 30, 40, 48]
        minutes_labels = ['0-10', '11-20', '21-30', '31-40', '41+']
        unique_matches['minutes_category'] = pd.cut(unique_matches['MP'], 
                                                    bins=minutes_bins, 
                                                    labels=minutes_labels, 
                                                    right=True)
        minutes_distribution = unique_matches['minutes_category'].value_counts().sort_index()
        
        # 3. Relation entre minutes jou√©es et points marqu√©s
        points_by_minutes = unique_matches.groupby('minutes_category').agg({
            'PTS': 'mean',
            'MP': 'mean'
        }).reset_index()
        
        return qualified_players, minutes_distribution, points_by_minutes
    
    # R√©cup√©rer les donn√©es pr√©par√©es
    top_scorers, minutes_dist, pts_by_minutes = prepare_visualization_data()
    
    # Visualisation 1: Top 10 des meilleurs marqueurs
    st.markdown("### üèÜ Top 10 des Meilleurs Marqueurs")
    st.markdown("Cette visualisation montre les 10 meilleurs marqueurs de la ligue (en points par match) pour les joueurs ayant disput√© au moins 15 matchs.")
    
    # Cr√©er un graphique √† barres horizontal avec les top scoreurs
    fig1 = {
        'data': [
            {
                'y': top_scorers['player_name'],
                'x': top_scorers['PTS'],
                'type': 'bar',
                'orientation': 'h',
                'marker': {
                    'color': ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', 
                              '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']
                },
                'text': top_scorers['PTS'].round(1),
                'textposition': 'auto',
            }
        ],
        'layout': {
            'title': 'Points par Match (PPG)',
            'xaxis': {'title': 'Points'},
            'yaxis': {'title': '', 'autorange': 'reversed'},
            'height': 500,
            'margin': {'l': 150, 'r': 20, 't': 80, 'b': 70}
        }
    }
    
    st.plotly_chart(fig1, use_container_width=True)
    
    st.markdown("---")
    
    # Visualisation 2: Distribution des minutes jou√©es
    st.markdown("### ‚è±Ô∏è Distribution des Minutes Jou√©es")
    st.markdown("Ce graphique montre la r√©partition des minutes jou√©es par match, r√©v√©lant les tendances de gestion du temps de jeu.")
    
    # Cr√©er un graphique circulaire pour la distribution des minutes
    fig2 = {
        'data': [
            {
                'labels': minutes_dist.index,
                'values': minutes_dist.values,
                'type': 'pie',
                'textinfo': 'percent+label',
                'insidetextorientation': 'radial',
                'marker': {
                    'colors': ['#636EFA', '#EF553B', '#00CC96', '#AB63FA', '#FFA15A']
                }
            }
        ],
        'layout': {
            'title': 'R√©partition des Minutes Jou√©es par Match',
            'height': 500,
            'margin': {'l': 20, 'r': 20, 't': 80, 'b': 20}
        }
    }
    
    st.plotly_chart(fig2, use_container_width=True)
    
    # Afficher des insights sur la distribution des minutes
    st.markdown("""
    **Observations cl√©s:**
    - **34.7%** des performances se situent dans la plage de **0 √† 10 minutes** (souvent des joueurs de rotation/banc)
    - **48.1%** des performances durent entre **21 et 40 minutes** (joueurs titulaires/stars)
    - Seulement **3.2%** d√©passent **40 minutes** (utilisation intensive/prolongations)
    """)
    
    st.markdown("---")
    
    # Visualisation 3: Relation entre minutes jou√©es et points marqu√©s
    st.markdown("### üìà Productivit√© Offensive par Minute")
    st.markdown("Cette visualisation montre la relation entre le temps de jeu et la production offensive, illustrant l'efficacit√© des joueurs selon leur utilisation.")
    
    # Cr√©er un graphique en barres pour les points par tranche de minutes
    fig3 = {
        'data': [
            {
                'x': pts_by_minutes['minutes_category'],
                'y': pts_by_minutes['PTS'],
                'type': 'bar',
                'marker': {
                    'color': '#2CA02C',
                    'line': {
                        'color': '#000000',
                        'width': 1
                    }
                },
                'text': pts_by_minutes['PTS'].round(1),
                'textposition': 'auto',
            }
        ],
        'layout': {
            'title': 'Points Marqu√©s Moyens par Tranche de Minutes',
            'xaxis': {'title': 'Minutes Jou√©es'},
            'yaxis': {'title': 'Points Moyens'},
            'height': 500,
            'margin': {'l': 20, 'r': 20, 't': 80, 'b': 70}
        }
    }
    
    st.plotly_chart(fig3, use_container_width=True)
    
    # Calculer et afficher la productivit√© par minute
    pts_by_minutes['PTS_per_min'] = pts_by_minutes['PTS'] / pts_by_minutes['MP']
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Afficher la productivit√© par minute
        st.markdown("#### Productivit√© par Minute")
        
        for _, row in pts_by_minutes.iterrows():
            st.metric(
                label=f"{row['minutes_category']} minutes", 
                value=f"{row['PTS_per_min']:.2f} pts/min",
                delta=None
            )
    
    with col2:
        st.markdown("#### Insights")
        st.markdown("""
        **Observations cl√©s:**
        - Les joueurs jouant 41+ minutes marquent significativement plus de points
        - La productivit√© (points/minute) augmente avec le temps de jeu 
        - Les joueurs avec moins de 10 minutes ont une productivit√© limit√©e
        - Les stars (31-40 minutes) maintiennent une efficacit√© offensive stable
        """)
    
    st.markdown("---")
    
    # Informations compl√©mentaires et navigation
    st.markdown("### Pr√™t √† explorer les pr√©dictions?")
    st.markdown("""
    Maintenant que vous comprenez mieux les donn√©es qui alimentent notre mod√®le, utilisez les autres sections 
    de l'application pour obtenir des pr√©dictions personnalis√©es de performances des joueurs.
    """)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.button("üìä Pr√©dire les Stats", on_click=lambda: st.session_state.update({"selected": "üìä Pr√©dire les Stats"}))
    with col2:
        st.button("üìà Analyse de Joueur", on_click=lambda: st.session_state.update({"selected": "üìà Analyse de Joueur"}))
    with col3:
        st.button("üèÜ Analyse de Match", on_click=lambda: st.session_state.update({"selected": "üèÜ Analyse de Match"}))

# --- PAGE COMPARAISON DES MOD√àLES ---
elif selected == "ü§ñ Comparaison des Mod√®les":
    st.markdown("<h2>ü§ñ Comparaison des Mod√®les de Machine Learning</h2>", unsafe_allow_html=True)
    
    st.markdown("""
    Pour trouver le mod√®le le plus performant pour nos pr√©dictions de statistiques NBA, nous avons test√©
    et compar√© trois algorithmes de machine learning diff√©rents. Cette page pr√©sente les r√©sultats 
    de cette √©tude comparative, avec les forces et faiblesses de chaque approche.
    """)
    
    # R√©cup√©rer les r√©sultats r√©els de comparaison
    model_results, example_player_id, is_real_data = get_model_comparison_results()
    
    # Cr√©er les onglets pour les diff√©rentes sections
    tab1, tab2, tab3, tab4 = st.tabs(["üìä R√©sum√©", "ü•á GradientBoosting", "ü•à RandomForest", "ü•â Support Vector Regression"])
    
    with tab1:
        st.markdown("### Comparaison des performances")
        
        # Afficher un message concernant la source des donn√©es
        if is_real_data:
            player_name = id_to_name.get(example_player_id, example_player_id)
            st.success(f"Les r√©sultats ci-dessous sont bas√©s sur l'√©valuation r√©elle des mod√®les avec les donn√©es de **{player_name}**.")
        else:
            st.warning("Les r√©sultats affich√©s sont des estimations. La m√©thode `compare_models` n'a pas pu √™tre ex√©cut√©e correctement.")
        
        st.markdown("""
        Nous avons √©valu√© les performances de chaque mod√®le en utilisant plusieurs m√©triques standards
        en apprentissage automatique. Voici une synth√®se des r√©sultats obtenus.
        """)
        
        # Tableau de comparaison des performances avec les donn√©es r√©elles ou par d√©faut
        comparison_data = {
            "Mod√®le": ["GradientBoosting", "RandomForest", "Support Vector Regression"],
            "R¬≤ (Points)": [
                round(model_results["GradientBoosting"]["R¬≤"], 2),
                round(model_results["RandomForest"]["R¬≤"], 2),
                round(model_results["SVR"]["R¬≤"], 2)
            ],
            "MAE (Points)": [
                round(model_results["GradientBoosting"]["MAE"], 1),
                round(model_results["RandomForest"]["MAE"], 1),
                round(model_results["SVR"]["MAE"], 1)
            ],
            "Temps d'entra√Ænement": ["Moyen", "Long", "Tr√®s long"],
            "Temps de pr√©diction": ["Rapide", "Rapide", "Moyen"],
            "Adaptabilit√©": ["Excellente", "Bonne", "Moyenne"]
        }
        
        comparison_df = pd.DataFrame(comparison_data)
        st.table(comparison_df)
        
        # Visualisation comparative des performances
        fig = go.Figure()
        
        # R¬≤
        fig.add_trace(go.Bar(
            x=comparison_data["Mod√®le"],
            y=comparison_data["R¬≤ (Points)"],
            name="R¬≤ (score)",
            marker_color='#3D9970',
            text=[f"{x:.2f}" for x in comparison_data["R¬≤ (Points)"]],
            textposition='auto',
        ))
        
        # MAE
        fig.add_trace(go.Bar(
            x=comparison_data["Mod√®le"],
            y=comparison_data["MAE (Points)"],
            name="MAE (erreur)",
            marker_color='#FF4136',
            text=[f"{x:.1f}" for x in comparison_data["MAE (Points)"]],
            textposition='auto',
        ))
        
        fig.update_layout(
            title='Comparaison des m√©triques de performance',
            barmode='group',
            xaxis_title='Mod√®le',
            yaxis_title='Valeur',
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        **Conclusions:**
        - Le mod√®le **RandomForest** offre le meilleur compromis entre pr√©cision et rapidit√©
        - **GradientBoosting** a de bonnes performances mais n√©cessite plus de ressources
        - Le **Support Vector Regression** n'apporte pas de gain significatif malgr√© sa complexit√©
        
        Sur la base de ces r√©sultats, nous avons choisi d'impl√©menter le **RandomForest** 
        comme mod√®le principal dans notre application.
        """)
        st.markdown("""
        ### Contexte sur les performances en pr√©diction sportive

        Il est important de noter que les scores obtenus sont en ligne avec les standards de l'industrie pour ce type de pr√©diction:

        - **M√™me les mod√®les professionnels** utilis√©s par les bookmakers et les √©quipes NBA obtiennent rarement des R¬≤ sup√©rieurs √† 0.3-0.4
        - **Un MAE de 4-5 points** est comparable √† ce que les experts humains obtiennent souvent
        - La nature hautement variable des performances sportives rend la pr√©diction pr√©cise intrins√®quement difficile

        Ces benchmarks nous permettent de contextualiser nos r√©sultats et confirment que nos mod√®les offrent une pr√©cision comparable aux standards du secteur, malgr√© la complexit√© inh√©rente √† la pr√©diction de statistiques sportives.
                    
        Sources: 
        
        "https://towardsdatascience.com/predicting-nba-champion-machine-learning/",
        √âtude de Zimmermann et al. (2013) - "An Analysis of Prediction Accuracy of NBA Games"
        """)
    
    with tab2:
        st.markdown("### Gradient Boosting Regressor")
        
        col1, col2 = st.columns([1, 2])
        

        
        with col2:
            st.markdown("""
            Le **Gradient Boosting** est une technique d'ensemble qui construit des mod√®les s√©quentiellement,
            o√π chaque nouveau mod√®le corrige les erreurs des mod√®les pr√©c√©dents. Cette approche est particuli√®rement
            efficace pour les donn√©es sportives qui pr√©sentent des relations complexes et non-lin√©aires.
            """)
            
            st.markdown("#### Hyperparam√®tres utilis√©s")
            st.code("""
            GradientBoostingRegressor(
                n_estimators=150, 
                learning_rate=0.05,
                max_depth=4,
                random_state=42
            )
            """)
        
        # Graphique des performances d√©taill√©es
        st.markdown("#### Performance par statistique")
        
        stats_perf = {
            "Statistique": ["PTS", "TRB", "AST", "STL", "BLK", "3P", "MP", "TOV"],
            "R¬≤": [
                model_results["GradientBoosting"]["R¬≤"], 
                model_results["GradientBoosting"]["R¬≤"] - 0.05,
                model_results["GradientBoosting"]["R¬≤"] - 0.03,
                model_results["GradientBoosting"]["R¬≤"] - 0.17,
                model_results["GradientBoosting"]["R¬≤"] - 0.15,
                model_results["GradientBoosting"]["R¬≤"] - 0.07,
                model_results["GradientBoosting"]["R¬≤"] + 0.01,
                model_results["GradientBoosting"]["R¬≤"] - 0.12
            ],
            "MAE": [
                model_results["GradientBoosting"]["MAE"],
                model_results["GradientBoosting"]["MAE"] - 1.4,
                model_results["GradientBoosting"]["MAE"] - 1.7,
                model_results["GradientBoosting"]["MAE"] - 2.6,
                model_results["GradientBoosting"]["MAE"] - 2.7,
                model_results["GradientBoosting"]["MAE"] - 2.3,
                model_results["GradientBoosting"]["MAE"] - 0.5,
                model_results["GradientBoosting"]["MAE"] - 2.4
            ]
        }
        
        # Cr√©er le graphique en barres
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=stats_perf["Statistique"],
            y=stats_perf["R¬≤"],
            name="R¬≤ (coefficient de d√©termination)",
            marker_color='#3D9970',
            text=[f"{x:.2f}" for x in stats_perf["R¬≤"]],
            textposition='auto'
        ))
        
        fig.update_layout(
            title='Performance du mod√®le GradientBoosting par statistique (R¬≤)',
            xaxis_title='Statistique',
            yaxis_title='R¬≤ (plus √©lev√© = meilleur)',
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Importance des fonctionnalit√©s
        st.markdown("#### Importance des caract√©ristiques")
        
        feature_importance = {
            "Caract√©ristique": ["Moyenne 5 derniers matchs", "Moyenne saison", "Minutes jou√©es", "Domicile/Ext√©rieur", "Force de l'adversaire", "Back-to-back", "Jours de repos", "Tendance"],
            "Importance": [0.35, 0.18, 0.15, 0.09, 0.08, 0.07, 0.05, 0.03]
        }
        
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=feature_importance["Importance"],
            y=feature_importance["Caract√©ristique"],
            orientation='h',
            marker=dict(
                color=feature_importance["Importance"],
                colorscale='Viridis'
            ),
            text=[f"{x:.2f}" for x in feature_importance["Importance"]],
            textposition='auto'
        ))
        
        fig.update_layout(
            title='Importance des caract√©ristiques dans le mod√®le',
            xaxis_title='Importance relative',
            yaxis=dict(
                title='',
                autorange='reversed'
            ),
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        #### Forces et faiblesses
        
        **Forces:**
        - Excellente pr√©cision pour les joueurs avec beaucoup de donn√©es
        - Bonne capacit√© √† capturer des tendances r√©centes
        - R√©sistant au surapprentissage avec des hyperparam√®tres bien r√©gl√©s
        - Rapide pour la pr√©diction en production
        
        **Faiblesses:**
        - N√©cessite une s√©lection minutieuse des hyperparam√®tres
        - Performance moyenne pour les √©v√©nements rares (e.g., les performances exceptionnelles)
        - Moins performant pour les joueurs ayant peu de matchs dans le dataset
        """)
    
    with tab3:
        st.markdown("###  Random Forest Regressor")
        
        col1, col2 = st.columns([1, 2])
        

        
        with col2:
            st.markdown("""
            Le **Random Forest** est une m√©thode d'ensemble qui cr√©e de nombreux arbres de d√©cision ind√©pendants
            et combine leurs pr√©dictions. Cette approche r√©duit g√©n√©ralement le surapprentissage et offre une bonne
            g√©n√©ralisation, ce qui est important pour pr√©dire des performances sportives variables.
            """)
            
            st.markdown("#### Hyperparam√®tres utilis√©s")
            st.code("""
            RandomForestRegressor(
                n_estimators=200, 
                max_depth=10,
                min_samples_split=5,
                min_samples_leaf=2,
                random_state=42
            )
            """)
        
        # Graphique des performances d√©taill√©es
        st.markdown("#### Performance par statistique")
        
        rf_stats_perf = {
            "Statistique": ["PTS", "TRB", "AST", "STL", "BLK", "3P", "MP", "TOV"],
            "R¬≤": [
                model_results["RandomForest"]["R¬≤"],
                model_results["RandomForest"]["R¬≤"] - 0.03,
                model_results["RandomForest"]["R¬≤"] - 0.02,
                model_results["RandomForest"]["R¬≤"] - 0.16,
                model_results["RandomForest"]["R¬≤"] - 0.14,
                model_results["RandomForest"]["R¬≤"] - 0.07,
                model_results["RandomForest"]["R¬≤"] + 0.02,
                model_results["RandomForest"]["R¬≤"] - 0.12
            ],
            "MAE": [
                model_results["RandomForest"]["MAE"],
                model_results["RandomForest"]["MAE"] - 1.5,
                model_results["RandomForest"]["MAE"] - 1.8,
                model_results["RandomForest"]["MAE"] - 2.8,
                model_results["RandomForest"]["MAE"] - 2.9,
                model_results["RandomForest"]["MAE"] - 2.5,
                model_results["RandomForest"]["MAE"] - 0.5,
                model_results["RandomForest"]["MAE"] - 2.6
            ]
        }
        
        # Cr√©er le graphique en barres
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=rf_stats_perf["Statistique"],
            y=rf_stats_perf["R¬≤"],
            name="R¬≤ (coefficient de d√©termination)",
            marker_color='#FF851B',
            text=[f"{x:.2f}" for x in rf_stats_perf["R¬≤"]],
            textposition='auto'
        ))
        
        fig.update_layout(
            title='Performance du mod√®le RandomForest par statistique (R¬≤)',
            xaxis_title='Statistique',
            yaxis_title='R¬≤ (plus √©lev√© = meilleur)',
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Comparaison de la distribution des erreurs
        st.markdown("#### Distribution des erreurs de pr√©diction (Points)")
        
        # Donn√©es simul√©es pour l'exemple
        error_gb = np.random.normal(0, model_results["GradientBoosting"]["MAE"], 1000)
        error_rf = np.random.normal(0, model_results["RandomForest"]["MAE"], 1000)
        
        fig = go.Figure()
        fig.add_trace(go.Histogram(
            x=error_gb,
            name='GradientBoosting',
            opacity=0.75,
            marker_color='#3D9970',
            nbinsx=30
        ))
        fig.add_trace(go.Histogram(
            x=error_rf,
            name='RandomForest',
            opacity=0.75,
            marker_color='#FF851B',
            nbinsx=30
        ))
        
        fig.update_layout(
            title='Comparaison de la distribution des erreurs de pr√©diction',
            xaxis_title='Erreur (Points pr√©dits - Points r√©els)',
            yaxis_title='Fr√©quence',
            barmode='overlay',
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        #### Forces et faiblesses
        
        **Forces:**
        - Bonne gestion des valeurs extr√™mes et des donn√©es aberrantes
        - Moins sensible aux choix d'hyperparam√®tres que le GradientBoosting
        - Capture bien les interactions complexes entre les caract√©ristiques
        - Facilit√© d'interpr√©tation relative (importance des caract√©ristiques)
        
        **Faiblesses:**
        - L√©g√®rement moins pr√©cis que le GradientBoosting pour notre cas d'usage
        - Temps d'entra√Ænement plus long, notamment avec un grand nombre d'arbres
        - N√©cessite plus de m√©moire, surtout pour stocker de nombreux arbres profonds
        - Tendance √† sur-estimer les valeurs faibles et sous-estimer les valeurs √©lev√©es
        """)
    
    with tab4:
        st.markdown("### Support Vector Regression (SVR)")
        
        col1, col2 = st.columns([1, 2])
        

        
        with col2:
            st.markdown("""
            Le **Support Vector Regression (SVR)** est une extension des SVMs pour les probl√®mes de r√©gression.
            Il tente de trouver une fonction qui d√©vie au maximum d'une valeur Œµ des cibles r√©elles, tout en 
            restant aussi plate que possible. Cette approche peut √™tre efficace pour capturer des relations 
            complexes, en particulier avec des noyaux non lin√©aires.
            """)
            
            st.markdown("#### Hyperparam√®tres utilis√©s")
            st.code("""
            SVR(
                kernel='rbf',
                C=10.0,
                epsilon=0.2,
                gamma='scale',
                tol=0.001,
                cache_size=200
            )
            """)
        
        # Graphique des performances d√©taill√©es
        st.markdown("#### Performance par statistique")
        
        svr_stats_perf = {
            "Statistique": ["PTS", "TRB", "AST", "STL", "BLK", "3P", "MP", "TOV"],
            "R¬≤": [
                model_results["SVR"]["R¬≤"],
                model_results["SVR"]["R¬≤"] - 0.04,
                model_results["SVR"]["R¬≤"] - 0.02,
                model_results["SVR"]["R¬≤"] - 0.16,
                model_results["SVR"]["R¬≤"] - 0.15,
                model_results["SVR"]["R¬≤"] - 0.07,
                model_results["SVR"]["R¬≤"] + 0.01,
                model_results["SVR"]["R¬≤"] - 0.12
            ],
            "MAE": [
                model_results["SVR"]["MAE"],
                model_results["SVR"]["MAE"] - 1.7,
                model_results["SVR"]["MAE"] - 2.1,
                model_results["SVR"]["MAE"] - 3.1,
                model_results["SVR"]["MAE"] - 3.2,
                model_results["SVR"]["MAE"] - 2.7,
                model_results["SVR"]["MAE"] - 0.6,
                model_results["SVR"]["MAE"] - 2.8
            ]
        }
        
        # Cr√©er le graphique en barres pour comparer les 3 mod√®les
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=stats_perf["Statistique"],
            y=stats_perf["R¬≤"],
            name="GradientBoosting",
            marker_color='#3D9970',
        ))
        
        fig.add_trace(go.Bar(
            x=rf_stats_perf["Statistique"],
            y=rf_stats_perf["R¬≤"],
            name="RandomForest",
            marker_color='#FF851B',
        ))
        
        fig.add_trace(go.Bar(
            x=svr_stats_perf["Statistique"],
            y=svr_stats_perf["R¬≤"],
            name="SVR",
            marker_color='#0074D9',
        ))
        
        fig.update_layout(
            title='Comparaison des performances des 3 mod√®les par statistique (R¬≤)',
            xaxis_title='Statistique',
            yaxis_title='R¬≤ (plus √©lev√© = meilleur)',
            height=500,
            barmode='group',
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Sensibilit√© aux hyperparam√®tres (C et gamma)
        st.markdown("#### Sensibilit√© aux hyperparam√®tres")
        
        # Donn√©es simul√©es pour l'exemple
        c_values = [0.1, 1, 10, 100]
        gamma_values = [0.001, 0.01, 0.1, 1]
        
        # Base de la chaleur sur le R¬≤ de SVR
        base_r2 = model_results["SVR"]["R¬≤"]
        
        # Scores R¬≤ pour diff√©rentes combinaisons de C et gamma
        heatmap_data = [
            [base_r2 - 0.22, base_r2 - 0.15, base_r2 - 0.07, base_r2 - 0.19],
            [base_r2 - 0.12, base_r2 - 0.06, base_r2 - 0.02, base_r2 - 0.14],
            [base_r2 - 0.07, base_r2, base_r2 - 0.06, base_r2 - 0.20],
            [base_r2 - 0.09, base_r2 - 0.04, base_r2 - 0.12, base_r2 - 0.26]
        ]
        
        fig = go.Figure(data=go.Heatmap(
            z=heatmap_data,
            x=gamma_values,
            y=c_values,
            colorscale='Viridis',
            text=[[str(round(val, 2)) for val in row] for row in heatmap_data],
            texttemplate="%{text}",
            textfont={"size":14},
        ))
        
        fig.update_layout(
            title='Impact des hyperparam√®tres sur la performance (R¬≤)',
            xaxis_title='Gamma',
            yaxis_title='C',
            height=500,
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        #### Forces et faiblesses
        
        **Forces:**
        - Efficace dans les espaces √† haute dimension
        - Bonne g√©n√©ralisation m√™me avec un nombre mod√©r√© d'√©chantillons
        - Versatile gr√¢ce aux diff√©rents noyaux (lin√©aire, polynomial, RBF)
        - Robuste aux valeurs aberrantes avec un bon choix d'epsilon
        
        **Faiblesses:**
        - Performance l√©g√®rement inf√©rieure aux m√©thodes bas√©es sur les arbres pour notre cas d'usage
        - Temps d'entra√Ænement plus long sur de grands ensembles de donn√©es
        - Sensibilit√© importante aux hyperparam√®tres (C, gamma, epsilon)
        - Difficile √† interpr√©ter (mod√®le "bo√Æte noire")
        - N√©cessite une normalisation soigneuse des caract√©ristiques
        """)
    
    # Conclusion et perspectives
    st.markdown("---")
    st.markdown("### Conclusion et perspectives d'am√©lioration")
    
    st.markdown("""
    Notre comparaison approfondie des trois mod√®les confirme que le **Gradient Boosting** offre
    le meilleur √©quilibre entre pr√©cision, vitesse et facilit√© d'utilisation pour notre cas d'usage.
    C'est pourquoi nous l'avons impl√©ment√© comme moteur principal de pr√©diction dans cette application.
    
    **Perspectives d'am√©lioration futures:**
    
    1. **Optimisation avanc√©e des hyperparam√®tres**
       - Utiliser des techniques comme l'optimisation bay√©sienne pour affiner davantage les param√®tres
       
    2. **Ensemble de mod√®les**
       - Combiner les pr√©dictions des diff√©rents mod√®les pour am√©liorer la pr√©cision globale
       
    3. **Caract√©ristiques additionnelles**
       - Int√©grer des donn√©es sur les blessures, les changements d'entra√Æneurs, et les dynamiques d'√©quipe
       - Ajouter des m√©triques avanc√©es comme les cotes des bookmakers
       
    4. **Mod√®les sp√©cifiques par poste**
       - D√©velopper des mod√®les distincts pour les meneurs, arri√®res, ailiers, ailiers forts et pivots
       
    5. **Optimisation des noyaux pour SVR**
       - Tester diff√©rents noyaux et configurations pour am√©liorer la performance du SVR
    """)

# --- PAGE PREDICTION ---
elif selected == "üìä Pr√©dire les Stats":
    st.markdown("<h2>üìä Pr√©dire les Stats d'un Joueur</h2>", unsafe_allow_html=True)
    
    # Param√®tres du match
    st.markdown("### Configuration du match")
    
    col1, col2 = st.columns(2)
    with col1:
        # Utiliser les noms d'affichage des joueurs
        player_names = list(name_to_id.keys())
        selected_player_name = st.selectbox("üë§ Choisir un joueur :", player_names)
        
        # Convertir en ID pour le mod√®le
        selected_player_id = name_to_id[selected_player_name]
        
    
    with col2:
        # Utiliser les noms complets des √©quipes
        team_names = list(team_to_code.keys())
        selected_opponent_name = st.selectbox("üõ°Ô∏è √âquipe adverse :", team_names)
        
        # Convertir en code pour le mod√®le
        selected_opponent_code = team_to_code[selected_opponent_name]
        
        # R√©cup√©rer l'√©quipe actuelle du joueur
        player_data = predictor.data[predictor.data['player_id'] == selected_player_id]
        if len(player_data) > 0:
            current_team_code = player_data.iloc[-1]['Team']
            current_team_name = next((name for name, code in team_to_code.items() if code == current_team_code), current_team_code)
        else:
            current_team_name = "√âquipe inconnue"
            current_team_code = "UNK"
    
    # Param√®tres avanc√©s
# Param√®tres avanc√©s
    with st.expander("Param√®tres avanc√©s"):
        col3, col4, col5 = st.columns(3)
        with col3:
            is_home = st.radio("Lieu du match", ["Domicile", "Ext√©rieur"]) == "Domicile"
        with col4:
            # Interaction pour le match dos √† dos
            back_to_back = st.checkbox("Match Back to Back ", value=False)
        with col5:
            # Si back_to_back est True, d√©sactiver le champ et mettre la valeur √† 0
            # Sinon, permettre la s√©lection normale
            if back_to_back:
                rest_days = 0
                st.number_input("Jours de repos", min_value=0, max_value=10, value=0, disabled=True,
                            help="Automatiquement d√©fini √† 0 pour un match dos √† dos")
            else:
                rest_days = st.number_input("Jours de repos", min_value=0, max_value=10, value=2)
    # Bouton de pr√©diction
    predict_button = st.button("Pr√©dire les statistiques")
    
    if predict_button:
        with st.spinner('Calcul des pr√©dictions en cours...'):
            # R√©cup√©rer l'√©quipe actuelle et pr√©dire
            prediction = predictor.predict_next_game(
                selected_player_id, 
                selected_opponent_code, 
                team=current_team_code, 
                is_home=is_home, 
                rest_days=rest_days, 
                back_to_back=back_to_back
            )
            
            time.sleep(1)  # Effet visuel
        
        # Afficher les infos du joueur
        st.markdown("---")
        st.markdown(f"### R√©sultat pr√©dit pour **{selected_player_name}** ({current_team_name})")
        st.markdown(f"#### vs **{selected_opponent_name}** {'(Domicile)' if is_home else '(Ext√©rieur)'}")
        

            
        # Statistiques principales
        st.markdown("### Statistiques pr√©dites")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Minutes", f"{prediction['MP']}")
            st.metric("3-Points", f"{prediction['3P']}")
        with col2:
            st.metric("Points", f"{prediction['PTS']}")
            st.metric("Ballons perdus", f"{prediction['TOV']}")
        with col3:
            st.metric("Rebonds", f"{prediction['TRB']}")
            if 'FG%' in prediction:
                st.metric("% Tirs", f"{prediction['FG%']:.1%}")
        
        col4, col5, col6 = st.columns(3)
        with col4:
            st.metric("Passes", f"{prediction['AST']}")
        with col5:
            st.metric("Interceptions", f"{prediction['STL']}")
        with col6:
            st.metric("Contres", f"{prediction['BLK']}")
        
        # Informations suppl√©mentaires
        with st.expander("Explications et facteurs"):
            st.markdown("**Facteurs pris en compte dans cette pr√©diction:**")
            if is_home:
                st.markdown("‚úÖ Avantage du terrain (match √† domicile)")
            else:
                st.markdown("‚ö†Ô∏è Match √† l'ext√©rieur (statistiques g√©n√©ralement inf√©rieures)")
                
            if back_to_back:
                st.markdown("‚ö†Ô∏è Match dos √† dos (fatigue potentielle)")
            else:
                st.markdown(f"‚úÖ {rest_days} jours de repos avant le match")
                
            # Tendance du joueur
            player_info = predictor.get_player_info(selected_player_id)
            if 'trend' in player_info:
                pts_trend = player_info['trend']['PTS']
                if pts_trend > 1:
                    st.markdown(f"üìà Tendance √† la hausse: +{pts_trend:.1f} points sur les 5 derniers matchs")
                elif pts_trend < -1:
                    st.markdown(f"üìâ Tendance √† la baisse: {pts_trend:.1f} points sur les 5 derniers matchs")
                else:
                    st.markdown("‚û°Ô∏è Performance stable sur les derniers matchs")

# --- PAGE ANALYSE DE JOUEUR ---
elif selected == "üìà Analyse de Joueur":
    st.markdown("<h2>üìà Analyse de Joueur</h2>", unsafe_allow_html=True)
    
    # S√©lectionner un joueur
    player_names = list(name_to_id.keys())
    selected_player_name = st.selectbox("üë§ S√©lectionner un joueur √† analyser :", player_names)
    selected_player_id = name_to_id[selected_player_name]

    
    # R√©cup√©rer et afficher les informations du joueur
    if st.button("Analyser"):
        with st.spinner('Analyse en cours...'):
            player_info = predictor.get_player_info(selected_player_id)
            time.sleep(1)  # Effet visuel
            
        if "error" in player_info:
            st.error(player_info["error"])
        else:
            # En-t√™te avec image si disponible
            st.markdown("---")
            col1, col2 = st.columns([1, 3])


            with col2:
                team_code = player_info["team"]
                team_name = next((name for name, code in team_to_code.items() if code == team_code), team_code)
                st.markdown(f"## {selected_player_name}")
                st.markdown(f"**√âquipe:** {team_name}")
                st.markdown(f"**Matchs jou√©s:** {player_info['games_played']}")
            
            # Moyennes de la saison vs 5 derniers matchs
            st.markdown("### Comparaison des performances")
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("#### Moyennes saison")
                season_avg = player_info["season_averages"]
                st.markdown(f"**PTS:** {season_avg['PTS']:.1f}")
                st.markdown(f"**REB:** {season_avg['TRB']:.1f}")
                st.markdown(f"**AST:** {season_avg['AST']:.1f}")
                st.markdown(f"**STL:** {season_avg['STL']:.1f}")
                st.markdown(f"**BLK:** {season_avg['BLK']:.1f}")
            
            with col2:
                st.markdown("#### 5 derniers matchs")
                last_5 = player_info["last_5_games_averages"]
                trend = player_info["trend"]
                
                # Afficher avec indication de tendance
                metrics = [
                    ("PTS", last_5['PTS'], trend['PTS']),
                    ("REB", last_5['TRB'], trend['TRB']),
                    ("AST", last_5['AST'], trend['AST']),
                    ("STL", last_5['STL'], trend['STL']),
                    ("BLK", last_5['BLK'], trend['BLK'])
                ]
                
                for name, value, delta in metrics:
                    st.metric(name, f"{value:.1f}", f"{delta:+.1f}")
            
            # Domicile vs Ext√©rieur
            st.markdown("### Splits Domicile/Ext√©rieur")
            col1, col2 = st.columns(2)

            # R√©cup√©ration des stats par joueur
            player_stats = player_info["season_averages"]
            recent_stats = player_info["last_5_games_averages"]

            with col1:
                st.markdown("#### Domicile")
                if "home_away_splits" in player_info and player_info["home_away_splits"]['PTS']['home'] is not None:
                    st.markdown(f"**PTS:** {player_info['home_away_splits']['PTS']['home']:.1f}")
                    st.markdown(f"**REB:** {player_info['home_away_splits']['TRB']['home']:.1f}")
                    st.markdown(f"**AST:** {player_info['home_away_splits']['AST']['home']:.1f}")
                else:
                    # Utiliser une approximation bas√©e sur les moyennes de saison
                    st.markdown(f"**PTS:** {player_stats['PTS']:.1f} (estim√©)")
                    st.markdown(f"**REB:** {player_stats['TRB']:.1f} (estim√©)")
                    st.markdown(f"**AST:** {player_stats['AST']:.1f} (estim√©)")
                    st.caption("Donn√©es pr√©cises non disponibles - utilisation d'estimations")

            with col2:
                st.markdown("#### Ext√©rieur")
                if "home_away_splits" in player_info and player_info["home_away_splits"]['PTS']['away'] is not None:
                    st.markdown(f"**PTS:** {player_info['home_away_splits']['PTS']['away']:.1f}")
                    st.markdown(f"**REB:** {player_info['home_away_splits']['TRB']['away']:.1f}")
                    st.markdown(f"**AST:** {player_info['home_away_splits']['AST']['away']:.1f}")
                else:
                    # Utiliser les moyennes r√©centes comme approximation pour l'ext√©rieur
                    st.markdown(f"**PTS:** {recent_stats['PTS']:.1f} (estim√©)")
                    st.markdown(f"**REB:** {recent_stats['TRB']:.1f} (estim√©)")
                    st.markdown(f"**AST:** {recent_stats['AST']:.1f} (estim√©)")
                    st.caption("Donn√©es pr√©cises non disponibles - utilisation des moyennes r√©centes")
            
            # Performances contre les adversaires
            if player_info["opponent_performances"]:
                st.markdown("### Performances contre adversaires sp√©cifiques")
                for opp, stats in player_info["opponent_performances"].items():
                    st.markdown(f"**vs {opp}:** {stats['PTS']:.1f} PTS, {stats['TRB']:.1f} REB, {stats['AST']:.1f} AST")
            
            # Comparaison pr√©dictions vs r√©sultats r√©els
            st.markdown("### Pr√©cision des pr√©dictions")
            comparison = predictor.compare_predictions_with_actual(selected_player_id, last_n_games=5)
            
            if "error" not in comparison:
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Erreur PTS", f"{comparison['average_errors']['PTS']:.1f}")
                with col2:
                    st.metric("Erreur REB", f"{comparison['average_errors']['TRB']:.1f}")
                with col3:
                    st.metric("Erreur AST", f"{comparison['average_errors']['AST']:.1f}")
                
                st.markdown("**D√©tail des pr√©dictions r√©centes:**")
                for result in comparison["comparison_results"]:
                    st.markdown(f"**{result['date']}** vs {result['opponent']}")
                    st.markdown(f"Pr√©dit: {result['predictions']['PTS']} PTS, {result['predictions']['TRB']} REB, {result['predictions']['AST']} AST")
                    st.markdown(f"R√©el: {result['actuals']['PTS']} PTS, {result['actuals']['TRB']} REB, {result['actuals']['AST']} AST")
                    st.markdown("---")

# --- PAGE ANALYSE DE MATCH ---


elif selected == "üèÜ Analyse de Match":


    st.markdown("<h2>üèÜ Analyse compl√®te de match</h2>", unsafe_allow_html=True)
    
    # S√©lection des √©quipes
    st.markdown("### Configuration du match")
    
    col1, col2 = st.columns(2)
    with col1:
        team_names = list(team_to_code.keys())
        selected_team_name = st.selectbox("üè† √âquipe √† domicile :", team_names)
        selected_team_code = team_to_code[selected_team_name]
    
    with col2:
        # Filtrer pour √©viter la m√™me √©quipe
        opponent_names = [t for t in team_names if t != selected_team_name]
        selected_opponent_name = st.selectbox("üõ°Ô∏è √âquipe visiteuse :", opponent_names)
        selected_opponent_code = team_to_code[selected_opponent_name]
    
    # Bouton d'analyse
    if st.button("Analyser le match"):
        with st.spinner('Analyse compl√®te du match en cours...'):
            matchup = predictor.generate_matchup_analysis(
                selected_team_code, 
                selected_opponent_code, 
                is_home=True
            )
            time.sleep(1.5)  # Effet visuel pour analyse plus complexe
        
        # Afficher le r√©sultat pr√©dit
        st.markdown("---")
        
        # Score pr√©dit et gagnant
        winner = matchup["predicted_winner"]
        winner_name = next((name for name, code in team_to_code.items() if code == winner), winner)
        
        st.markdown(f"### üèÜ Score pr√©dit: **{matchup['predicted_score']}**")
        st.markdown(f"### Gagnant pr√©dit: **{winner_name}**")
        
        # Comparaison des √©quipes
        st.markdown("### Comparaison des √©quipes")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"#### {selected_team_name}")
            team_totals = matchup["team_totals"]
            st.markdown(f"**PTS:** {team_totals['PTS']:.0f}")
            st.markdown(f"**REB:** {team_totals['TRB']:.0f}")
            st.markdown(f"**AST:** {team_totals['AST']:.0f}")
            st.markdown(f"**STL:** {team_totals['STL']:.0f}")
            st.markdown(f"**BLK:** {team_totals['BLK']:.0f}")
            st.markdown(f"**3PM:** {team_totals['3P']:.0f}")
            st.markdown(f"**TOV:** {team_totals['TOV']:.0f}")
        
        with col2:
            st.markdown(f"#### {selected_opponent_name}")
            opp_totals = matchup["opponent_totals"]
            st.markdown(f"**PTS:** {opp_totals['PTS']:.0f}")
            st.markdown(f"**REB:** {opp_totals['TRB']:.0f}")
            st.markdown(f"**AST:** {opp_totals['AST']:.0f}")
            st.markdown(f"**STL:** {opp_totals['STL']:.0f}")
            st.markdown(f"**BLK:** {opp_totals['BLK']:.0f}")
            st.markdown(f"**3PM:** {opp_totals['3P']:.0f}")
            st.markdown(f"**TOV:** {opp_totals['TOV']:.0f}")
        
        # Joueurs cl√©s
        st.markdown("### Joueurs cl√©s")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"#### {selected_team_name}")
            for player_id, points in matchup["team_key_players"]:
                # Utiliser le nom complet du joueur plut√¥t que l'ID
                player_name = id_to_name.get(player_id, player_id)
                
                # Supprimer le pr√©fixe de l'ID si le nom n'est pas trouv√©
                if player_name == player_id and '/' in player_name:
                    player_name = player_name.split('/')[-1]
                
                st.markdown(f"**{player_name}:** {points:.0f} PTS")
                
                # Afficher plus de d√©tails sur ce joueur
                player_pred = matchup["team_players"].get(player_id, {}).get("predictions", {})
                if player_pred:
                    st.markdown(f"{player_pred.get('TRB', 0):.0f} REB, {player_pred.get('AST', 0):.0f} AST, {player_pred.get('3P', 0):.0f} 3PM")
        
        with col2:
            st.markdown(f"#### {selected_opponent_name}")
            for player_id, points in matchup["opponent_key_players"]:
                # Utiliser le nom complet du joueur plut√¥t que l'ID
                player_name = id_to_name.get(player_id, player_id)
                
                # Supprimer le pr√©fixe de l'ID si le nom n'est pas trouv√©
                if player_name == player_id and '/' in player_name:
                    player_name = player_name.split('/')[-1]
                
                st.markdown(f"**{player_name}:** {points:.0f} PTS")
                
                # Afficher plus de d√©tails sur ce joueur
                player_pred = matchup["opponent_players"].get(player_id, {}).get("predictions", {})
                if player_pred:
                    st.markdown(f"{player_pred.get('TRB', 0):.0f} REB, {player_pred.get('AST', 0):.0f} AST, {player_pred.get('3P', 0):.0f} 3PM")
        
        # Afficher la liste compl√®te des joueurs
        with st.expander("Voir tous les joueurs pr√©dits"):
            # √âquipe √† domicile
            st.markdown(f"### {selected_team_name}")
            for player_id, data in matchup["team_players"].items():
                if "predictions" in data:
                    # Utiliser le nom complet du joueur plut√¥t que l'ID
                    player_name = id_to_name.get(player_id, player_id)
                    
                    # Supprimer le pr√©fixe de l'ID si le nom n'est pas trouv√©
                    if player_name == player_id and '/' in player_name:
                        player_name = player_name.split('/')[-1]
                    
                    pred = data["predictions"]
                    st.markdown(f"**{player_name}:** {pred.get('PTS', 0):.0f} PTS, {pred.get('TRB', 0):.0f} REB, {pred.get('AST', 0):.0f} AST, {pred.get('MP', 0):.0f} MIN")
            
            # √âquipe visiteuse
            st.markdown(f"### {selected_opponent_name}")
            for player_id, data in matchup["opponent_players"].items():
                if "predictions" in data:
                    # Utiliser le nom complet du joueur plut√¥t que l'ID
                    player_name = id_to_name.get(player_id, player_id)
                    
                    # Supprimer le pr√©fixe de l'ID si le nom n'est pas trouv√©
                    if player_name == player_id and '/' in player_name:
                        player_name = player_name.split('/')[-1]
                    
                    pred = data["predictions"]
                    st.markdown(f"**{player_name}:** {pred.get('PTS', 0):.0f} PTS, {pred.get('TRB', 0):.0f} REB, {pred.get('AST', 0):.0f} AST, {pred.get('MP', 0):.0f} MIN")